// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: asr-online.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct StreamingVoice_GetVersionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct StreamingVoice_GetVersionReponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var version: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct StreamingVoice_VoiceRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var byteBuff: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct StreamingVoice_TextReply: Encodable {

  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: Int32 = 0

  var msg: String = String()

  var segment: Int32 = 0

  var id: String = String()

  var result: StreamingVoice_TextReply.Result {
    get {return _result ?? StreamingVoice_TextReply.Result()}
    set {_result = newValue}
  }
  /// Returns true if `result` has been explicitly set.
  var hasResult: Bool {return self._result != nil}
  /// Clears the value of `result`. Subsequent reads from it will return its default value.
  mutating func clearResult() {self._result = nil}

  var segmentStart: Float = 0

  var segmentLength: Float = 0

  var totalLength: Float = 0
    
  var audioURL: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  var audioUrl_: String = String()

  struct Result: Codable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hypotheses: [StreamingVoice_TextReply.Result.Hypothese] = []

    var final: Bool = false

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct Hypothese: Codable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var transcript: String = String()

      var transcriptNormed: String = String()

      var transcriptUrlencoded: String = String()

      var transcriptNormedUrlencoded: String = String()

      var confidence: Float = 0

      var likelihood: Float = 0

      var unknownFields = SwiftProtobuf.UnknownStorage()

      enum CodingKeys: String, CodingKey {
                      case transcript = "transcript"
                      case transcriptNormed = "transcript_normed"
                      case transcriptUrlencoded = "transcript_urlencoded"
                      case transcriptNormedUrlencoded = "transcript_normed_urlencoded"
                      case confidence = "confidence"
                      case likelihood = "likelihood"
      }
      init() {}
    }
    enum CodingKeys: String, CodingKey {
                          case hypotheses = "hypotheses"
                          case final = "final"
          }
    init() {}
  }

  init() {}

  fileprivate var _result: StreamingVoice_TextReply.Result? = nil

   enum CodingKeys: String, CodingKey {
            case status = "status"
            case msg = "msg"
            case segment = "segment"
            case id = "id"
            case result
            case segmentStart = "segment_start"
            case segmentLength = "segment_length"
            case totalLength = "total_length"
            case audioUrl_ = "audio_url"
   }

   func encode(to encoder: Encoder) throws {
           var container = encoder.container(keyedBy: CodingKeys.self)
           try container.encode(status, forKey: .status)
           try container.encode(msg, forKey: .msg)
           try container.encode(segment, forKey: .segment)
           try container.encode(id, forKey: .id)
           try container.encode(result, forKey: .result)
           try container.encode(segmentStart, forKey: .segmentStart)
           try container.encode(segmentLength, forKey: .segmentLength)
           try container.encode(totalLength, forKey: .totalLength)
           try container.encode(audioUrl_, forKey: .audioUrl_)
   }
}

#if swift(>=5.5) && canImport(_Concurrency)
extension StreamingVoice_GetVersionRequest: @unchecked Sendable {}
extension StreamingVoice_GetVersionReponse: @unchecked Sendable {}
extension StreamingVoice_VoiceRequest: @unchecked Sendable {}
extension StreamingVoice_TextReply: @unchecked Sendable {}
extension StreamingVoice_TextReply.Result: @unchecked Sendable {}
extension StreamingVoice_TextReply.Result.Hypothese: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "streaming_voice"

extension StreamingVoice_GetVersionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetVersionRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StreamingVoice_GetVersionRequest, rhs: StreamingVoice_GetVersionRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StreamingVoice_GetVersionReponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetVersionReponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.version) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StreamingVoice_GetVersionReponse, rhs: StreamingVoice_GetVersionReponse) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StreamingVoice_VoiceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VoiceRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "byte_buff"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.byteBuff) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.byteBuff.isEmpty {
      try visitor.visitSingularBytesField(value: self.byteBuff, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StreamingVoice_VoiceRequest, rhs: StreamingVoice_VoiceRequest) -> Bool {
    if lhs.byteBuff != rhs.byteBuff {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StreamingVoice_TextReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TextReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    8: .same(proto: "msg"),
    2: .same(proto: "segment"),
    3: .same(proto: "id"),
    4: .same(proto: "result"),
    5: .standard(proto: "segment_start"),
    6: .standard(proto: "segment_length"),
    7: .standard(proto: "total_length"),
    9: .standard(proto: "audio_url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.status) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.segment) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._result) }()
      case 5: try { try decoder.decodeSingularFloatField(value: &self.segmentStart) }()
      case 6: try { try decoder.decodeSingularFloatField(value: &self.segmentLength) }()
      case 7: try { try decoder.decodeSingularFloatField(value: &self.totalLength) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.msg) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.audioURL) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.segment != 0 {
      try visitor.visitSingularInt32Field(value: self.segment, fieldNumber: 2)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 3)
    }
    try { if let v = self._result {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if self.segmentStart != 0 {
      try visitor.visitSingularFloatField(value: self.segmentStart, fieldNumber: 5)
    }
    if self.segmentLength != 0 {
      try visitor.visitSingularFloatField(value: self.segmentLength, fieldNumber: 6)
    }
    if self.totalLength != 0 {
      try visitor.visitSingularFloatField(value: self.totalLength, fieldNumber: 7)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 8)
    }
    if !self.audioURL.isEmpty {
      try visitor.visitSingularStringField(value: self.audioURL, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StreamingVoice_TextReply, rhs: StreamingVoice_TextReply) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.segment != rhs.segment {return false}
    if lhs.id != rhs.id {return false}
    if lhs._result != rhs._result {return false}
    if lhs.segmentStart != rhs.segmentStart {return false}
    if lhs.segmentLength != rhs.segmentLength {return false}
    if lhs.totalLength != rhs.totalLength {return false}
    if lhs.audioURL != rhs.audioURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StreamingVoice_TextReply.Result: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = StreamingVoice_TextReply.protoMessageName + ".Result"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hypotheses"),
    2: .same(proto: "final"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.hypotheses) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.final) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hypotheses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.hypotheses, fieldNumber: 1)
    }
    if self.final != false {
      try visitor.visitSingularBoolField(value: self.final, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StreamingVoice_TextReply.Result, rhs: StreamingVoice_TextReply.Result) -> Bool {
    if lhs.hypotheses != rhs.hypotheses {return false}
    if lhs.final != rhs.final {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StreamingVoice_TextReply.Result.Hypothese: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = StreamingVoice_TextReply.Result.protoMessageName + ".Hypothese"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "transcript"),
    2: .standard(proto: "transcript_normed"),
    3: .standard(proto: "transcript_urlencoded"),
    4: .standard(proto: "transcript_normed_urlencoded"),
    5: .same(proto: "confidence"),
    6: .same(proto: "likelihood"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.transcript) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.transcriptNormed) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.transcriptUrlencoded) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.transcriptNormedUrlencoded) }()
      case 5: try { try decoder.decodeSingularFloatField(value: &self.confidence) }()
      case 6: try { try decoder.decodeSingularFloatField(value: &self.likelihood) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.transcript.isEmpty {
      try visitor.visitSingularStringField(value: self.transcript, fieldNumber: 1)
    }
    if !self.transcriptNormed.isEmpty {
      try visitor.visitSingularStringField(value: self.transcriptNormed, fieldNumber: 2)
    }
    if !self.transcriptUrlencoded.isEmpty {
      try visitor.visitSingularStringField(value: self.transcriptUrlencoded, fieldNumber: 3)
    }
    if !self.transcriptNormedUrlencoded.isEmpty {
      try visitor.visitSingularStringField(value: self.transcriptNormedUrlencoded, fieldNumber: 4)
    }
    if self.confidence != 0 {
      try visitor.visitSingularFloatField(value: self.confidence, fieldNumber: 5)
    }
    if self.likelihood != 0 {
      try visitor.visitSingularFloatField(value: self.likelihood, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StreamingVoice_TextReply.Result.Hypothese, rhs: StreamingVoice_TextReply.Result.Hypothese) -> Bool {
    if lhs.transcript != rhs.transcript {return false}
    if lhs.transcriptNormed != rhs.transcriptNormed {return false}
    if lhs.transcriptUrlencoded != rhs.transcriptUrlencoded {return false}
    if lhs.transcriptNormedUrlencoded != rhs.transcriptNormedUrlencoded {return false}
    if lhs.confidence != rhs.confidence {return false}
    if lhs.likelihood != rhs.likelihood {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
